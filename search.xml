<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C/C++交叉编译</title>
    <url>/2024/11/11/CC++%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<p>交叉编译区别于本地编译</p>
<a id="more"></a>

<h2 id="一、本地主机、目标主机和交叉编译"><a href="#一、本地主机、目标主机和交叉编译" class="headerlink" title="一、本地主机、目标主机和交叉编译"></a>一、本地主机、目标主机和交叉编译</h2><ul>
<li><strong>本地主机</strong>是完成开发、预处理、编译、汇编、链接的主机</li>
<li><strong>目标主机</strong>是程序最终运行的主机，一般用于目标主机无法进行开发工作的情况，也适合用于多版本库的编译。</li>
<li><strong>交叉编译</strong>是在本地主机编译能在目标主机运行的程序，本地主机和目标主机的指令集架构不同，一般是AMD64的本地和ARM的目标。</li>
</ul>
<h2 id="二、交叉编译工具"><a href="#二、交叉编译工具" class="headerlink" title="二、交叉编译工具"></a>二、交叉编译工具</h2><p>在本地主机开发，并在本地主机运行的叫本地编译，使用常规的本地编译器：gcc/g++。本地主机编译目标主机运行的叫交叉编译，需要使用对应的交叉编译工具，例如在x86_64（即AMD64）上编译arm（64位）架构的程序所需要安装的工具如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc-aarch64-linux-gnu  //安装c/c++交叉编译工具</span><br><span class="line">sudo apt install g++-aarch64-linux-gnu</span><br><span class="line"></span><br><span class="line">sudo apt install libc6-dev-arm64-cross  //编译时提醒缺少一些头文件</span><br></pre></td></tr></table></figure>

<h2 id="三、交叉编译程序"><a href="#三、交叉编译程序" class="headerlink" title="三、交叉编译程序"></a>三、交叉编译程序</h2><p>有如下c++程序, main.cpp:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"g++ cross"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>本地编译，使用常规g++编译器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ main.cpp    //编译，产生a.out的可执行文件</span><br><span class="line">./a.out		    //运行，输出"g++ cross"</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用交叉编译，需要使用刚下载的交叉编译工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//先查看交叉编译器工具版本，验证工具安装成功</span><br><span class="line">aarch64-linux-gnu-g++ -v</span><br><span class="line"></span><br><span class="line">//然后交叉编译上述main.cpp</span><br><span class="line">aarch64-linux-gnu-g++ main.cpp</span><br></pre></td></tr></table></figure>

<p>交叉编译出来的可执行文件不可以在本地主机运行，只能在符合的目标主机运行。所谓交叉编译，核心还是编译，把原本的<code>g++</code>换成<code>aarch64-linux-gnu-g++</code>即可。</p>
</li>
</ol>
<h2 id="四、进阶：使用cmake进行交叉编译"><a href="#四、进阶：使用cmake进行交叉编译" class="headerlink" title="四、进阶：使用cmake进行交叉编译"></a>四、进阶：使用cmake进行交叉编译</h2><p>在CMakeLists.txt的同级目录下新建xxx.cmake文件，名字任意，后缀须为cmake，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定目标系统</span><br><span class="line">set(CMAKE_SYSTEM_NAME Linux)</span><br><span class="line"># 指定目标平台</span><br><span class="line">set(CMAKE_SYSTEM_PROCESSOR arm)</span><br><span class="line"># 指定C编译器</span><br><span class="line">set(CMAKE_C_COMPILER &#x2F;usr&#x2F;bin&#x2F;aarch64-linux-gnu-gcc)</span><br><span class="line"># 指定C++编译器</span><br><span class="line">set(CMAKE_CXX_COMPILER &#x2F;usr&#x2F;bin&#x2F;aarch64-linux-gnu-g++)</span><br></pre></td></tr></table></figure>

<p>使用cmake时，需要加上该文件参数，指导cmake进行交叉编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建编译目录</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;新建的xxx.cmake起名为：armToolchain.cmake</span><br><span class="line">cmake .. -DCMAKE_TOOLCHAIN_FILE&#x3D;..&#x2F;armToolchain.cmake</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;进行编译</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>如果不带<code>-DCMAKE_TOOLCHAIN_FILE</code>参数，直接<code>cmake ..</code>就是进行本地编译</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Cross Compile</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2020/07/01/Git/</url>
    <content><![CDATA[<p>Git常用操作</p>
<a id="more"></a>

<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>假设一个项目有两个分支，一个是master，一个是dev，你在dev分支上正在开发一个新功能，但是这时候，有人已经在master分支上又有了新的提交，于是你的dev就落后了master一个commit，当你想把dev代码合到master时，需要这样做：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master --rebase</span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure>

<h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>git可以进行一些配置,让git在使用的时候更顺手</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;加了&lt;--global&gt;代表全局都这样配置,不加代表只在本文件夹内这样配置</span><br><span class="line">git config &lt;--global&gt; user.name &quot;your name&quot; </span><br><span class="line">git config &lt;--global&gt; user.email &quot;your@email.com&quot; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;记住用户名和密码,执行完了这条命令后,git push推送时输入一次账号密码就可以记住了</span><br><span class="line">git config &lt;--global&gt; credential.helper store</span><br></pre></td></tr></table></figure>

<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>本地commit后发现提交进去了垃圾文件，或者commit的信息写错了，解决如下：<br>1、git reset –mixed HEAD^<br>使用 git reset HEAD^ 命令默认的就是mixed模式，此命令表示不删除本地工作空间提交的代码，也即保留对工作区的修改，但是修改未进入暂存区。</p>
<p>2、git reset –soft HEAD^<br>此命令也表示不删除本地工作空间提交的代码，也即保留对工作区的修改，并且修改已进入暂存区。</p>
<p>3、git reset –hard HEAD^<br>此命令表示删除本地工作空间提交的代码，也即不保留对工作区的修改，工作区完全回退到上个版本的样子。此命令注意慎用。</p>
<p>三者最大区别<br>前面两个命令会保留自己在本地的修改（纯撤回提交，如果是提交之后发现有的地方修改错误，可使用这两个命令撤回提交，然后只对错误的地方重新修改，最后再重新提交），而最后一个命令会恢复自己在本地的修改到上一个提交版本。</p>
<p>必备技能<br>1）HEAD^的意思是上一个版本，也可以写成HEAD～1，如果你进行了2次commit，都想撤回的话，可以使用HEAD～2，以此类推。<br>2）如果是commit注释写错了，只是想改一下注释，只需要执行命令行：git commit –amend。此时会进入默认Vim编辑器，修改完之后保存即可。<br>3）浪子回头再回头。意思是我撤回commit后，我又后悔了，我不想撤回了…。此时我们可以通过版本号来回退，先使用 git reflog 命令来获取版本号，再使用 git reset –hard 版本号 命令来恢复。</p>
<h2 id="删除远程仓库的一次commit"><a href="#删除远程仓库的一次commit" class="headerlink" title="删除远程仓库的一次commit"></a>删除远程仓库的一次commit</h2><p>这个提交方式，不会在远程仓库留下修改记录，但是谨记一点：强推也会删掉别人的commit记录，所以手速要快</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commit3  &#x2F;&#x2F;已经推到远程的一次错误提交</span><br><span class="line">commit2</span><br><span class="line">commit1</span><br><span class="line"></span><br><span class="line">如果想回到某次提交，可以这样做：</span><br><span class="line"></span><br><span class="line">git reset --hard commitID2</span><br><span class="line">git push -f</span><br><span class="line"></span><br><span class="line">但是如果别人有了一次commit4的提交，也会被擦除记录，所以，谨慎使用！请确认别人在commit2后没有提交</span><br></pre></td></tr></table></figure>
<h2 id="远程分支重命名"><a href="#远程分支重命名" class="headerlink" title="远程分支重命名"></a>远程分支重命名</h2><p>首先，远程分支是不支持直接重命名的，所以要曲线修改分支名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -m oldName newName       &#x2F;&#x2F;1.本地分支：修改打算更改的分支名</span><br><span class="line">git push --delete origin oldName    &#x2F;&#x2F;2.远程分支：删除远程的旧分支</span><br><span class="line">git push -u origin newName          &#x2F;&#x2F;3.本地-&gt;远程：推到远程的新建分支上</span><br></pre></td></tr></table></figure>

<h2 id="新建远程分支"><a href="#新建远程分支" class="headerlink" title="新建远程分支"></a>新建远程分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b newBranchName       &#x2F;&#x2F;以当前分支的内容作为基准内容，新建一个分支，并切换过去</span><br><span class="line">git push                            &#x2F;&#x2F;将本地的分支推到远程</span><br></pre></td></tr></table></figure>

<h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><p><code>git branch --delete oldBranch</code></p>
<h2 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h2><ul>
<li>原本的远程main分支有若干提交记录：commit id：A-&gt;B-&gt;C.</li>
<li>拉取到本地新建dev分支，开发新功能，提交新commit：A-&gt;B-&gt;C-&gt;1-&gt;2.</li>
<li>此时远程main分支提交了新的commit：A-&gt;B-&gt;C-&gt;D.</li>
<li>将本地main分支更新到D的进度，再切换到dev分支：<code>git rebase main</code></li>
<li>再切回main分支：<code>git merge dev</code></li>
<li>此时本地main分支commit顺序为：A-&gt;B-&gt;C-&gt;D-&gt;1-&gt;2.</li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>How is my blog set up?</title>
    <url>/2020/06/02/How-is-my-blog-set-up/</url>
    <content><![CDATA[<h1 id="源码与静态网页分离"><a href="#源码与静态网页分离" class="headerlink" title="源码与静态网页分离"></a>源码与静态网页分离</h1><p>我采用的是<a href="https://ci.appveyor.com/login" target="_blank" rel="noopener">appveyor</a>,使用github登陆，教程如下：</p>
<a id="more"></a>

<h1 id="Some-Tips"><a href="#Some-Tips" class="headerlink" title="Some Tips"></a>Some Tips</h1><p>1.Open Typora directly.Click <a href="https://www.dazhuanlan.com/2020/03/06/5e617a0666d9a/" target="_blank" rel="noopener">here</a> to look over the tutorial</p>
<p>2.gihub的token要在appveyor上加密一下，才可以使用，为了你的安全着想</p>
]]></content>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Transform docx into pdf on windows</title>
    <url>/2021/08/01/Transform-docx-into-pdf-on-windows/</url>
    <content><![CDATA[<p>在存在大批量docx文件转换为pdf文件时，使用word的转换功能，打开一个转换一个，要是让你转换100个呢？市面上迅捷转换器做的不错，但是一次只能转换200个文件，而且是会员情况下。要是你需要处理20万个docx文件呢？</p>
<a id="more"></a>

<h1 id="条件准备"><a href="#条件准备" class="headerlink" title="条件准备"></a>条件准备</h1><p>windows 10电脑，装有word2016版及其以后，其他版本未测，情况未知。安装qt，如果你没有qt，可以现安装一个： <a href="https://download.qt.io/archive/qt/5.12/5.12.2/" target="_blank" rel="noopener">https://download.qt.io/archive/qt/5.12/5.12.2/</a> ，具体细节从略。</p>
<p><img src="https://raw.githubusercontent.com/iDealYangHao/blogImages/master/20210801204028.png" alt="windows_qt"></p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>Qt调用Microsoft的com组件，实现docx转换pdf操作，其实其他语言也可以调用这个com组件的，只不过Qt封装的比较好用。核心代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建一个word应用</span></span><br><span class="line">QAxObject *wordApplication = <span class="keyword">new</span> QAxObject(<span class="string">"Word.Application"</span>);</span><br><span class="line"><span class="comment">//并设置为处理文档模式,因为word还可以处理非docx的文件</span></span><br><span class="line">QAxObject *wordDoc = wordApplication&gt;querySubObject(<span class="string">"Documents"</span>);</span><br><span class="line"><span class="comment">//打开一个docx文件：inputfileName，比如：C:/Desktop/test.docx</span></span><br><span class="line">QAxObject *doc = wordDoc&gt;querySubObject(<span class="string">"Open(string,bool,bool)"</span>,</span><br><span class="line">  inputfileName,<span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//开始转换成pdf，OutputFileName由你自己决定,比如 C:/Desktop/test.pdf</span></span><br><span class="line">doc-&gt;querySubObject(<span class="string">"ExportAsFixedFormat(string, int ,bool)"</span>, </span><br><span class="line">  OutputFileName, <span class="number">17</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//最后处理完毕了一定要把打开的docx文件给关闭了，不然处理太多了会卡死word</span></span><br><span class="line">doc-&gt;dynamicCall(<span class="string">"Close(bool)"</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>具体参数请看微软官方的文档： <a href="https://docs.microsoft.com/zh-CN/office/vba/api/Word.Documents.Open" target="_blank" rel="noopener">https://docs.microsoft.com/zh-CN/office/vba/api/Word.Documents.Open</a> ，我不想啰里八嗦。</p>
<p>如果你连代码也不想写，拿去吧！pdf的代码仓库： <a href="https://github.com/iDealYangHao/word2pdf.git" target="_blank" rel="noopener">https://github.com/iDealYangHao/word2pdf.git</a> ,万一不能运行，可以gmail我。</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++交叉编译</title>
    <url>/2025/01/07/Unix%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Unix下文件打开、关闭、读写、定位操作。这些函数属于不带缓冲的I/O，是POSIX.1的组成部分。</p>
<a id="more"></a>

<h2 id="一、打开文件"><a href="#一、打开文件" class="headerlink" title="一、打开文件"></a>一、打开文件</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//若成功，返回文件描述符；若出错，返回−1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">int</span> oflag,... <span class="comment">/* mode_t mode */</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>path：要打开或者创建的文件名，相对路径、绝对路径都可以</p>
</li>
<li><p>oflag：打开方式：读、写、追加、创建等，主标志位必须且只能选择一个，副标志位可以多选或者不选，与主标志位进行或运算</p>
<ol>
<li><p>主标志位</p>
<p>1)   O_RDONLY　　　 只读打开</p>
<p>2)   O_WRONLY　　　 只写打开</p>
<p>3)   O_RDWR　　　　 读、写打开</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Unix</category>
      </categories>
      <tags>
        <tag>File</tag>
      </tags>
  </entry>
  <entry>
    <title>Core Dumped(核心已转储)</title>
    <url>/2024/08/06/core-dump/</url>
    <content><![CDATA[<h1 id="1-生成core文件"><a href="#1-生成core文件" class="headerlink" title="1.生成core文件"></a>1.生成core文件</h1><p>设置core文件的大小限制和存储位置</p>
<ul>
<li><p>设置core文件大小：<code>ulimit -c unlimited</code></p>
</li>
<li><p>设置存储位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">kernel.core_pattern &#x3D; &#x2F;tmp&#x2F;core-%p-%e-%t</span><br></pre></td></tr></table></figure>

<p>其本质是修改<code>/proc/sys/kernel/core_pattern</code>文件的内容，也可以使用其他方法</p>
</li>
</ul>
<h1 id="2-使用GDB来分析core文件"><a href="#2-使用GDB来分析core文件" class="headerlink" title="2.使用GDB来分析core文件"></a>2.使用GDB来分析core文件</h1><p>编译时加上<code>-g</code>选项，以便于生成的core文件可以用gdb来调试。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -g -o a a.c</span><br><span class="line">.&#x2F;a</span><br><span class="line">gdb .&#x2F;a core-xx-xx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone Changes Wallpapers</title>
    <url>/2021/07/31/iPhone-Changes-Wallpapers/</url>
    <content><![CDATA[<p>传统壁纸软件，有广告！很不爽！学会这个捷径，一键换iPhone壁纸。</p>
<a id="more"></a>

<h1 id="shortcuts-捷径-设置壁纸"><a href="#shortcuts-捷径-设置壁纸" class="headerlink" title="shortcuts(捷径)设置壁纸"></a>shortcuts(捷径)设置壁纸</h1><p>如图：设置流程，可以直接下载该<a href="https://www.icloud.com/shortcuts/1acdcf04148441f1abf5307ce0b2028f" target="_blank" rel="noopener">壁纸捷径</a></p>
<p><img src="https://raw.githubusercontent.com/iDealYangHao/blogImages/master/20210731234308.jpg" alt="壁纸获取流程图"></p>
<h1 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash</h1><p>这是一个开源图库，重点是<strong>免费</strong>！甚至你<strong>商用</strong>都可以，更甚至他们还开放了<strong>接口</strong>！<a href="https://unsplash.com" target="_blank" rel="noopener">unsplash</a>, 就是这么良心.</p>
<h2 id="获取任意图片"><a href="#获取任意图片" class="headerlink" title="获取任意图片"></a>获取任意图片</h2><p>这是官方接口文档，仅对于低频获取的小型软件：<a href="https://source.unsplash.com" target="_blank" rel="noopener">https://source.unsplash.com</a> ，还有一个针对开发者用户的：<a href="https://unsplash.com/developers" target="_blank" rel="noopener">https://unsplash.com/developers</a> ，开发者接口需要注册才可以使用。对于壁纸更换，用前一个就行了，无需注册，给出链接，直接下载图片。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;最简单，直接随机获取一张</span><br><span class="line">https:&#x2F;&#x2F;source.unsplash.com&#x2F;random</span><br><span class="line">&#x2F;&#x2F;加个尺寸</span><br><span class="line">https:&#x2F;&#x2F;source.unsplash.com&#x2F;random&#x2F;800x600</span><br><span class="line">&#x2F;&#x2F;获取你喜欢的一个摄影师的作品（如果ta存在图库的话）</span><br><span class="line">https:&#x2F;&#x2F;source.unsplash.com&#x2F;user&#x2F;erondu&#x2F;1600x900</span><br><span class="line">&#x2F;&#x2F;获取你喜欢的摄影师喜欢的作品</span><br><span class="line">https:&#x2F;&#x2F;source.unsplash.com&#x2F;user&#x2F;erondu&#x2F;likes&#x2F;1600x900</span><br><span class="line">&#x2F;&#x2F;获取非随机照片，daily或者weekly，每天&#x2F;周只返回同一张图片</span><br><span class="line">https:&#x2F;&#x2F;source.unsplash.com&#x2F;daily</span><br><span class="line">&#x2F;&#x2F;获取包含某个对象的图片，比如自然主题类，里面还包含水的</span><br><span class="line">https:&#x2F;&#x2F;source.unsplash.com&#x2F;?nature,water</span><br><span class="line">&#x2F;&#x2F;你也可以找一张狗相关的图片，还带有具体尺寸，注意尺寸的位置不在最后了</span><br><span class="line">https:&#x2F;&#x2F;source.unsplash.com&#x2F;1600x900&#x2F;?dog</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更详细的说明在官方</span><br><span class="line">https:&#x2F;&#x2F;source.unsplash.com</span><br></pre></td></tr></table></figure>

<p>将上述任意一个地址填到壁纸shortcuts的文本中，然后，run it！</p>
<p>对了，至于开发者才用到的接口，内容更加详细。但是我只是想换个壁纸呀～，后续如果在computer vision的学习中有需要大量图片，会专门看一下开发者接口的。其中一个场景就是：指定所有狗相关的图片，下载到本地，作为图片训练集，利用深度学习来让电脑认识“狗”。</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>iPhone</tag>
        <tag>unsplash</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/about/index.html</url>
    <content><![CDATA[<h1 id="Education"><a href="#Education" class="headerlink" title="Education:"></a>Education:</h1><ul>
<li>2015~2019 本科 江苏科技大学</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
